CHIP PainLab {
	IN sign, two, three, four;
	OUT a, b, c, d, e, f, g, dec;

	PARTS:
	//nots
	Not(in=sign, out=nsign); 
	Not(in=two, out=ntwo); 
	Not(in=three, out=nthree); 
	Not(in=four, out=nfour); 


	//tested
	//A: !2 !3 !4 + 2 4 + 3
	And4(a=ntwo, b=nthree, c=nfour, d=true, out=ntwonthreenfour); 
	And(a=two, b=four, out=twoFour);
	Or(a=ntwonthreenfour, b=twoFour, out=OrA);
	Or(a=OrA, b= three, out=a);


	//B: !2 + !3 !4 + 3 4
	And(a=nthree, b=nfour, out=nthreeAndFour);   
	And(a=three, b=four, out=threeAndFour);   
	Or(a=ntwo, b=nthreeAndFour, out=orB); 
	Or(a=orB, b=threeAndFour, out=b);  



	//C: 4 + !3 + 2
	Or(a=four, b=nthree, out=orC); 
	Or(a=orC, b=two, out=c); 


	//
	//D: 3 !4 + !2 3 + !2 !4 + 2 !3 4
	And(a=three, b=nfour, out=threeNfour); 
	And(a=ntwo, b=three, out=ntwothree); 
	And(a=ntwo, b=nfour, out=ntwoNfour );
	And4(a=two, b=nthree, c=four, d=true, out=twoNthreefour);
	Or(a=threeNfour, b=ntwothree, out=orDOne);
	Or(a=ntwoNfour, b=twoNthreefour, out=orDTwo);
	Or(a=orDOne, b=orDTwo, out=d); 


	//E: 3 !4 + !2 !4
	Or(a=threeNfour, b=ntwoNfour, out=e);  
	

	//F: 2 !3 + !3 !4 + 2 !4
	And(a=nthree, b=nfour, out=nthreeNfour);   
	Or(a=nthreeNfour, b=twoNthree, out=orF ); 
	Or(a=orF, b=twoNfour, out=f); 
	

//tested
	//G: 2 !3 + 2 !4 + !2 3
	And(a=two, b=nthree, out= twoNthree);
	And(a=two, b=nfour, out=twoNfour);
	Or(a=twoNthree, b=ntwothree, out=orG);
	Or(a=orG, b=twoNfour, out=g);


	//Dec: 1 4 + 1 3 + 1 2
	And(a=sign, b=four, out=signfour); 
	And(a=sign, b=three, out=signthree); 
	And(a=sign, b=two, out=signtwo); 
	Or(a=signfour, b=signthree, out=signoutinternal);
	Or(a=signoutinternal, b=signtwo, out=dec); 


//this are the chips we have
// 04 - 4 - not
// 00 - 10 - two way nands
// 20 - 4 - 4 way nands
// 86 - 2 - xors
// 32 - 4 - or
// 08 - 1 - ands
//	
	
}
